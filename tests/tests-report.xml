<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="0" skipped="0" tests="24" time="108.471" timestamp="2024-10-19T19:50:25.861372+02:00" hostname="Carloss-MacBook-Pro.local"><testcase classname="tests.test_api" name="test_root_endpoint" time="2.051" /><testcase classname="tests.test_api" name="test_get_models" time="0.001" /><testcase classname="tests.test_api" name="test_model_prediction" time="0.294" /><testcase classname="tests.test_api" name="test_model_prediction_not_found" time="0.002" /><testcase classname="tests.test_api" name="test_model_prediction_bad_image" time="0.028" /><testcase classname="tests.test_create_batches" name="test_create_batches_with_validation_data" time="0.011" /><testcase classname="tests.test_create_batches" name="test_create_batches_with_test_data" time="0.009" /><testcase classname="tests.test_create_batches" name="test_create_batches_with_training_data" time="0.010" /><testcase classname="tests.test_create_model" name="test_create_model" time="0.003" /><testcase classname="tests.test_get_label" name="test_get_label_image" time="0.001" /><testcase classname="tests.test_load_model" name="test_load_model" time="0.001" /><testcase classname="tests.test_load_params" name="test_load_params_train" time="0.003" /><testcase classname="tests.test_load_params" name="test_load_params_prepare" time="0.003" /><testcase classname="tests.test_load_params" name="test_load_params_predict" time="0.003" /><testcase classname="tests.test_load_processed_data" name="test_load_processed_data" time="0.004" /><testcase classname="tests.test_model" name="test_dbc_model" time="0.001"><error message="failed on setup with &quot;OSError: No file or directory found at /Users/andrea/Documents/GCED/TAED2_Mates/models/mobilenet.h5&quot;">@pytest.fixture
    def dbc_model():
        """
        Load model to test
        """
&gt;       return load_model("mobilenet")

tests/test_model.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
mates/features.py:135: in load_model
    model = tf_keras.models.load_model(MODELS_DIR / f"{model_name}.h5",
../../../Library/Caches/pypoetry/virtualenvs/mates-1BJ5KbKa-py3.11/lib/python3.11/site-packages/tf_keras/src/saving/saving_api.py:262: in load_model
    return legacy_sm_saving_lib.load_model(
../../../Library/Caches/pypoetry/virtualenvs/mates-1BJ5KbKa-py3.11/lib/python3.11/site-packages/tf_keras/src/utils/traceback_utils.py:70: in error_handler
    raise e.with_traceback(filtered_tb) from None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

filepath = PosixPath('/Users/andrea/Documents/GCED/TAED2_Mates/models/mobilenet.h5'), custom_objects = {'Custom&gt;Adadelta': &lt;class 'tf_keras.src.optimizers.adadelta.Adadelta'&gt;, 'Custom&gt;Adafactor': &lt;class 'tf_keras.src.opti...d': &lt;class 'tf_keras.src.optimizers.adagrad.Adagrad'&gt;, 'Custom&gt;Adam': &lt;class 'tf_keras.src.optimizers.adam.Adam'&gt;, ...}, compile = True, options = None

    @traceback_utils.filter_traceback
    def load_model(filepath, custom_objects=None, compile=True, options=None):
        """Loads a model saved via `model.save()`.
    
        Usage:
    
        &gt;&gt;&gt; model = tf.keras.Sequential([
        ...     tf.keras.layers.Dense(5, input_shape=(3,)),
        ...     tf.keras.layers.Softmax()])
        &gt;&gt;&gt; model.save('/tmp/model')
        &gt;&gt;&gt; loaded_model = tf.keras.models.load_model('/tmp/model')
        &gt;&gt;&gt; x = tf.random.uniform((10, 3))
        &gt;&gt;&gt; assert np.allclose(model.predict(x), loaded_model.predict(x))
    
        Note that the model weights may have different scoped names after being
        loaded. Scoped names include the model/layer names, such as
        `"dense_1/kernel:0"`. It is recommended that you use the layer properties to
        access specific variables, e.g. `model.get_layer("dense_1").kernel`.
    
        Args:
            filepath: One of the following:
                - String or `pathlib.Path` object, path to the saved model
                - `h5py.File` object from which to load the model
            custom_objects: Optional dictionary mapping names
                (strings) to custom classes or functions to be
                considered during deserialization.
            compile: Boolean, whether to compile the model
                after loading.
            options: Optional `tf.saved_model.LoadOptions` object that specifies
              options for loading from SavedModel.
    
        Returns:
            A TF-Keras model instance. If the original model was compiled, and saved
            with the optimizer, then the returned model will be compiled. Otherwise,
            the model will be left uncompiled. In the case that an uncompiled model
            is returned, a warning is displayed if the `compile` argument is set to
            `True`.
    
        Raises:
            ImportError: if loading from an hdf5 file and h5py is not available.
            IOError: In case of an invalid savefile.
        """
        with serialization.SharedObjectLoadingScope():
            custom_objects = custom_objects or {}
            tlco = object_registration._THREAD_LOCAL_CUSTOM_OBJECTS.__dict__
            gco = object_registration._GLOBAL_CUSTOM_OBJECTS
            custom_objects = {**custom_objects, **tlco, **gco}
            with object_registration.CustomObjectScope(custom_objects):
                with keras_option_scope(
                    save_traces=False, in_tf_saved_model_scope=True
                ):
                    with tf.__internal__.load_context(options):
                        filepath_str = io_utils.path_to_string(filepath)
                        if isinstance(filepath_str, str):
                            if not tf.io.gfile.exists(filepath_str):
&gt;                               raise IOError(
                                    f"No file or directory found at {filepath_str}"
                                )
E                               OSError: No file or directory found at /Users/andrea/Documents/GCED/TAED2_Mates/models/mobilenet.h5

../../../Library/Caches/pypoetry/virtualenvs/mates-1BJ5KbKa-py3.11/lib/python3.11/site-packages/tf_keras/src/saving/legacy/save.py:233: OSError</error></testcase><testcase classname="tests.test_predict" name="test_predict" time="58.110" /><testcase classname="tests.test_predict_single" name="test_dbc_model" time="43.156" /><testcase classname="tests.test_prepare" name="test_process_data_no_train" time="0.001" /><testcase classname="tests.test_prepare" name="test_process_data_train_save" time="0.004" /><testcase classname="tests.test_process_image" name="test_process_image" time="0.005" /><testcase classname="tests.test_read_data" name="test_read_data_with_training_data" time="0.002" /><testcase classname="tests.test_read_data" name="test_read_data_with_test_data" time="0.001" /><testcase classname="tests.test_read_labels" name="test_read_labels" time="0.003" /></testsuite></testsuites>